# Add these imports to the top of your backup.py file
from flask import Blueprint, render_template, request, jsonify, send_file
from flask_login import login_required, current_user
import subprocess
import os
import json
import threading
import time
import uuid
from datetime import datetime
import shutil
import sqlite3  # Add this import
import gnupg # Import the gnupg library

backup_bp = Blueprint('backup', __name__, url_prefix='/backup')

# Define a temporary directory for backups. In a production environment,
# this should be configurable and secured.
BACKUP_DIR = os.path.join(os.getcwd(), 'backups_temp')
os.makedirs(BACKUP_DIR, exist_ok=True)

# Database configuration - Based on your SQLAlchemy configuration
# Your app uses: 'sqlite:///bigcapitalpy.db'
DATABASE_PATH = os.path.join(os.getcwd(), 'bigcapitalpy.db')

# Alternative: Extract from Flask config dynamically
# from flask import current_app
# def get_database_path():
#     db_uri = current_app.config.get('SQLALCHEMY_DATABASE_URI', '')
#     if db_uri.startswith('sqlite:///'):
#         return db_uri.replace('sqlite:///', '')
#     return 'bigcapitalpy.db'  # fallback

# Define a GPG home directory for the application.
GPG_HOME = os.path.join(os.getcwd(), '.gnupg_app')
os.makedirs(GPG_HOME, exist_ok=True)

# Initialize the GPG object
gpg = gnupg.GPG(gnupghome=GPG_HOME)
gpg.keyserver = 'keyserver.ubuntu.com'