---
name: 'CI/CD Pipeline - BigCapitalPy'
'on':
  push:
    branches:
      - 'main'
      - 'develop'
  pull_request:
    branches:
      - 'main'
      - 'develop'
env:
  DOCKER_IMAGE_NAME: 'bigcapitalpy'
  DOCKER_HUB_REPO: 'caston81/bigcapitalpy'
jobs:
  build-and-test:
    runs-on: 'ubuntu-latest'
    steps:
      - name: 'Checkout code'
        uses: 'actions/checkout@v4'
      - name: 'Set up Docker Buildx'
        uses: 'docker/setup-buildx-action@v3'
      - name: 'Build Docker Image'
        run: 'docker build -t ${{ env.DOCKER_IMAGE_NAME }} .'
      - name: 'Test Application Startup'
        run: "docker run --rm -d \\\n  --name bigcapitalpy-test \\\n  -p 5000:5000 \\\n  -e DATABASE_URL=sqlite:///test.db \\\n  -e SECRET_KEY=test-secret \\\n  ${{ env.DOCKER_IMAGE_NAME }}\n\n# Wait for app to start with retry logic\necho \"Waiting for application to start...\"\nfor i in {1..30}; do\n  if docker exec bigcapitalpy-test curl -f http://localhost:5000/health 2>/dev/null; then\n    echo \"✓ Application started successfully\"\n    break\n  fi\n  if [ $i -eq 30 ]; then\n    echo \"✗ Application failed to start within 30 seconds\"\n    docker logs bigcapitalpy-test\n    exit 1\n  fi\n  sleep 1\ndone\n\n# Stop test container\ndocker stop bigcapitalpy-test\n"
      - name: 'Test Database Models Import'
        run: "docker run --rm \\\n  --entrypoint /bin/bash \\\n  -e DATABASE_URL=sqlite:///test.db \\\n  ${{ env.DOCKER_IMAGE_NAME }} \\\n  -c \"cd /app && python -c 'from packages.server.src.models import *; print(\\\"✓ All models imported successfully\\\")'\"\n"
      - name: 'Test Flask Application Import'
        run: "docker run --rm \\\n  --entrypoint /bin/bash \\\n  -e DATABASE_URL=sqlite:///test.db \\\n  ${{ env.DOCKER_IMAGE_NAME }} \\\n  -c \"cd /app && python -c 'from app import create_app; app = create_app(); print(\\\"✓ Flask application imported successfully\\\")'\"\n"
      - name: 'Log in to Docker Hub'
        if: 'github.event_name == ''push'' && (github.ref == ''refs/heads/main'' || github.ref == ''refs/heads/develop'')'
        uses: 'docker/login-action@v3'
        with:
          username: '${{ secrets.DOCKER_USERNAME }}'
          password: '${{ secrets.DOCKER_PASSWORD }}'
      - name: 'Generate Docker Tags'
        if: 'github.event_name == ''push'' && (github.ref == ''refs/heads/main'' || github.ref == ''refs/heads/develop'')'
        id: 'meta'
        run: "if [[ $GITHUB_REF == refs/heads/main ]]; then\n  echo \"tags=${{ env.DOCKER_HUB_REPO }}:latest,${{ env.DOCKER_HUB_REPO }}:${{ github.sha }}\" >> $GITHUB_OUTPUT\nelse\n  echo \"tags=${{ env.DOCKER_HUB_REPO }}:develop,${{ env.DOCKER_HUB_REPO }}:develop-${{ github.sha }}\" >> $GITHUB_OUTPUT\nfi\n"
      - name: 'Tag and Push Docker Image to Docker Hub'
        if: 'github.event_name == ''push'' && (github.ref == ''refs/heads/main'' || github.ref == ''refs/heads/develop'')'
        run: "set -euo pipefail\n\necho \"${{ steps.meta.outputs.tags }}\" | tr ',' '\\n' | while IFS= read -r tag; do\n  if [ -n \"$tag\" ]; then\n    docker tag ${{ env.DOCKER_IMAGE_NAME }} \"$tag\"\n    docker push \"$tag\"\n    echo \"Pushed: $tag\"\n  fi\ndone\n"
  database-migration-test:
    runs-on: 'ubuntu-latest'
    needs: 'build-and-test'
    services:
      postgres:
        image: 'postgres:13'
        env:
          POSTGRES_PASSWORD: 'postgres'
          POSTGRES_DB: 'bigcapitalpy_test'
        options: '--health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5'
        ports:
          - '5432:5432'
    steps:
      - name: 'Checkout code'
        uses: 'actions/checkout@v4'
      - name: 'Build Docker Image'
        run: 'docker build -t ${{ env.DOCKER_IMAGE_NAME }} .'
      - name: 'Test Database Migration'
        run: "docker run --rm \\\n  --network host \\\n  -e DATABASE_URL=postgresql://postgres:postgres@localhost:5432/bigcapitalpy_test \\\n  -e SECRET_KEY=test-secret \\\n  ${{ env.DOCKER_IMAGE_NAME }} \\\n  python -c \"\n  import sys\n  sys.path.insert(0, '/app')\n  from packages.server.src.database import db\n  from app import create_app\n  app = create_app()\n  with app.app_context():\n      db.create_all()\n      print('✓ Database schema created successfully')\n  \"\n"
  api-integration-test:
    runs-on: 'ubuntu-latest'
    needs: 'build-and-test'
    steps:
      - name: 'Checkout code'
        uses: 'actions/checkout@v4'
      - name: 'Build Docker Image'
        run: 'docker build -t ${{ env.DOCKER_IMAGE_NAME }} .'
      - name: 'Start Application for API Testing'
        run: "docker run --rm -d \\\n  --name bigcapitalpy-api-test \\\n  -p 5000:5000 \\\n  -e DATABASE_URL=sqlite:///test.db \\\n  -e SECRET_KEY=test-secret \\\n  ${{ env.DOCKER_IMAGE_NAME }}\n\n# Wait for app to start with retry logic\necho \"Waiting for application to start...\"\nfor i in {1..30}; do\n  if curl -f http://localhost:5000/health 2>/dev/null; then\n    echo \"✓ Application started successfully\"\n    break\n  fi\n  if [ $i -eq 30 ]; then\n    echo \"✗ Application failed to start within 30 seconds\"\n    docker logs bigcapitalpy-api-test\n    exit 1\n  fi\n  sleep 1\ndone\n"
      - name: 'Test API Endpoints'
        run: "# Test health endpoint\ncurl -f http://localhost:5000/health || exit 1\necho \"✓ Health endpoint working\"\n\n# Test login page\ncurl -f http://localhost:5000/auth/login || exit 1\necho \"✓ Login page accessible\"\n\n# Test API structure\ncurl -f http://localhost:5000/api/v1/ || exit 1\necho \"✓ API v1 accessible\"\n"
      - name: 'Cleanup API Test'
        if: 'always()'
        run: 'docker stop bigcapitalpy-api-test || true'
  accounting-workflow-test:
    runs-on: 'ubuntu-latest'
    needs: 'build-and-test'
    steps:
      - name: 'Checkout code'
        uses: 'actions/checkout@v4'
      - name: 'Build Docker Image'
        run: 'docker build -t ${{ env.DOCKER_IMAGE_NAME }} .'
      - name: 'Test BigCapitalPy Core Features'
        run: "docker run --rm \\\n  -e DATABASE_URL=sqlite:///test.db \\\n  -e SECRET_KEY=test-secret \\\n  ${{ env.DOCKER_IMAGE_NAME }} \\\n  python -c \"\n  import sys\n  sys.path.insert(0, '/app')\n  \n  # Test model imports\n  try:\n      from packages.server.src.models import (\n          Account, Customer, Vendor, Invoice, Item, \n          BankTransaction, Payment, JournalEntry\n      )\n      print('✓ Core models imported successfully')\n  except ImportError as e:\n      print(f'✗ Model import failed: {e}')\n      sys.exit(1)\n  \n  # Test enum imports\n  try:\n      from packages.server.src.models import (\n          AccountType, InvoiceStatus, PaymentMethod\n      )\n      print('✓ Enums imported successfully')\n  except ImportError as e:\n      print(f'✗ Enum import failed: {e}')\n      sys.exit(1)\n  \n  print('✓ BigCapitalPy core functionality validated')\n  \"\n"
  security-scan:
    runs-on: 'ubuntu-latest'
    needs: 'build-and-test'
    steps:
      - name: 'Checkout code'
        uses: 'actions/checkout@v4'
      - name: 'Build Docker Image'
        run: 'docker build -t ${{ env.DOCKER_IMAGE_NAME }} .'
      - name: 'Run Security Scan with Trivy'
        uses: 'aquasecurity/trivy-action@master'
        with:
          image-ref: '${{ env.DOCKER_IMAGE_NAME }}'
          format: 'sarif'
          output: 'trivy-results.sarif'
      - name: 'Upload Trivy scan results to GitHub Security tab'
        uses: 'github/codeql-action/upload-sarif@v3'
        if: 'always()'
        with:
          sarif_file: 'trivy-results.sarif'
